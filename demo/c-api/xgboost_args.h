/*
 *  This file is auto generated by oeedger8r. DO NOT EDIT.
 */
#ifndef EDGER8R_XGBOOST_ARGS_H
#define EDGER8R_XGBOOST_ARGS_H

#include <stdint.h>
#include <stdlib.h> /* for wchar_t */

/* #include <errno.h> - Errno propagation not enabled so not included. */

#include <openenclave/bits/result.h>

/**** User includes. ****/
#include "xgboost/c_api.h"
#include "dirent.h"
#include "sys/stat.h"

/**** User defined types in EDL. ****/
/* There were no user defined types. */

/**** ECALL marshalling structs. ****/
typedef struct _enclave_XGDMatrixCreateFromFile_args_t
{
    oe_result_t _result;
    int _retval;
    char* fname;
    int silent;
    DMatrixHandle* out;
} enclave_XGDMatrixCreateFromFile_args_t;

typedef struct _enclave_XGBoosterCreate_args_t
{
    oe_result_t _result;
    int _retval;
    DMatrixHandle* dmats;
    bst_ulong len;
    BoosterHandle* out;
} enclave_XGBoosterCreate_args_t;

typedef struct _enclave_XGBoosterSetParam_args_t
{
    oe_result_t _result;
    int _retval;
    BoosterHandle handle;
    char* name;
    char* value;
} enclave_XGBoosterSetParam_args_t;

typedef struct _enclave_XGBoosterUpdateOneIter_args_t
{
    oe_result_t _result;
    int _retval;
    BoosterHandle handle;
    int iter;
    DMatrixHandle dtrain;
} enclave_XGBoosterUpdateOneIter_args_t;

typedef struct _enclave_XGBoosterEvalOneIter_args_t
{
    oe_result_t _result;
    int _retval;
    BoosterHandle handle;
    int iter;
    DMatrixHandle* dmats;
    char** evnames;
    bst_ulong len;
    char** out_str;
} enclave_XGBoosterEvalOneIter_args_t;

typedef struct _enclave_XGBoosterPredict_args_t
{
    oe_result_t _result;
    int _retval;
    BoosterHandle handle;
    DMatrixHandle dmat;
    int option_mask;
    unsigned int ntree_limit;
    bst_ulong* out_len;
    bst_float** out_result;
} enclave_XGBoosterPredict_args_t;

typedef struct _enclave_XGDMatrixGetFloatInfo_args_t
{
    oe_result_t _result;
    int _retval;
    DMatrixHandle handle;
    char* field;
    bst_ulong* out_len;
    bst_float** out_dptr;
} enclave_XGDMatrixGetFloatInfo_args_t;

typedef struct _enclave_XGBoosterLoadModel_args_t
{
    oe_result_t _result;
    int _retval;
    BoosterHandle handle;
    char* fname;
} enclave_XGBoosterLoadModel_args_t;

typedef struct _enclave_XGBoosterSaveModel_args_t
{
    oe_result_t _result;
    int _retval;
    BoosterHandle handle;
    char* fname;
} enclave_XGBoosterSaveModel_args_t;

typedef struct _enclave_XGDMatrixFree_args_t
{
    oe_result_t _result;
    int _retval;
    DMatrixHandle handle;
} enclave_XGDMatrixFree_args_t;

typedef struct _enclave_XGBoosterFree_args_t
{
    oe_result_t _result;
    int _retval;
    BoosterHandle handle;
} enclave_XGBoosterFree_args_t;

typedef struct _enclave_get_remote_report_with_pubkey_args_t
{
    oe_result_t _result;
    int _retval;
    uint8_t** pem_key;
    size_t* key_size;
    uint8_t** remote_report;
    size_t* remote_report_size;
} enclave_get_remote_report_with_pubkey_args_t;

typedef struct _enclave_verify_remote_report_and_set_pubkey_args_t
{
    oe_result_t _result;
    int _retval;
    uint8_t* pem_key;
    size_t key_size;
    uint8_t* remote_report;
    size_t remote_report_size;
} enclave_verify_remote_report_and_set_pubkey_args_t;

/**** OCALL marshalling structs. ****/
typedef struct _host_opendir_args_t
{
    oe_result_t _result;
    DIR* _retval;
    char* path;
} host_opendir_args_t;

typedef struct _host_opendir_and_readdir_args_t
{
    oe_result_t _result;
    void* _retval;
    char* path;
} host_opendir_and_readdir_args_t;

typedef struct _host_stat_args_t
{
    oe_result_t _result;
    struct stat _retval;
    char* path;
} host_stat_args_t;

typedef struct _host_fopen_args_t
{
    oe_result_t _result;
    FILE* _retval;
    char* fname;
    char* flag;
} host_fopen_args_t;

typedef struct _host_fclose_args_t
{
    oe_result_t _result;
    FILE* fp;
} host_fclose_args_t;

typedef struct _host_fseek_args_t
{
    oe_result_t _result;
    FILE* _retval;
    FILE* fp;
    long int pos;
} host_fseek_args_t;

typedef struct _host_fread_one_args_t
{
    oe_result_t _result;
    void* _retval;
    FILE* fp;
    size_t size;
} host_fread_one_args_t;

typedef struct _host_fwrite_one_args_t
{
    oe_result_t _result;
    void* ptr;
    size_t count;
    FILE* fp;
} host_fwrite_one_args_t;

/**** Trusted function IDs ****/
enum
{
    xgboost_fcn_id_enclave_XGDMatrixCreateFromFile = 0,
    xgboost_fcn_id_enclave_XGBoosterCreate = 1,
    xgboost_fcn_id_enclave_XGBoosterSetParam = 2,
    xgboost_fcn_id_enclave_XGBoosterUpdateOneIter = 3,
    xgboost_fcn_id_enclave_XGBoosterEvalOneIter = 4,
    xgboost_fcn_id_enclave_XGBoosterPredict = 5,
    xgboost_fcn_id_enclave_XGDMatrixGetFloatInfo = 6,
    xgboost_fcn_id_enclave_XGBoosterLoadModel = 7,
    xgboost_fcn_id_enclave_XGBoosterSaveModel = 8,
    xgboost_fcn_id_enclave_XGDMatrixFree = 9,
    xgboost_fcn_id_enclave_XGBoosterFree = 10,
    xgboost_fcn_id_enclave_get_remote_report_with_pubkey = 11,
    xgboost_fcn_id_enclave_verify_remote_report_and_set_pubkey = 12,
    xgboost_fcn_id_trusted_call_id_max = OE_ENUM_MAX
};

/**** Untrusted function IDs. ****/
enum
{
    xgboost_fcn_id_host_opendir = 0,
    xgboost_fcn_id_host_opendir_and_readdir = 1,
    xgboost_fcn_id_host_stat = 2,
    xgboost_fcn_id_host_fopen = 3,
    xgboost_fcn_id_host_fclose = 4,
    xgboost_fcn_id_host_fseek = 5,
    xgboost_fcn_id_host_fread_one = 6,
    xgboost_fcn_id_host_fwrite_one = 7,
    xgboost_fcn_id_untrusted_call_max = OE_ENUM_MAX
};

#endif // EDGER8R_XGBOOST_ARGS_H

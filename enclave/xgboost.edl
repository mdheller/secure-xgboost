enclave {
    include "xgboost/c_api.h"
    trusted {
        public int enclave_XGDMatrixCreateFromFile(
                [user_check] const char *fname,
                int silent,
                [out] DMatrixHandle *out); 

        public int enclave_XGBoosterCreate(
                [user_check] const DMatrixHandle* dmats, 
                bst_ulong len, 
                [user_check] BoosterHandle* out);

        public int enclave_XGBoosterSetParam(
                [user_check, isptr] BoosterHandle handle,
                [user_check] const char *name,
                [user_check] const char *value); 

        public int enclave_XGBoosterUpdateOneIter(
                [user_check, isptr] BoosterHandle handle,
                int iter,
                [user_check, isptr] DMatrixHandle dtrain);

        public int enclave_XGBoosterEvalOneIter(
                [user_check, isptr] BoosterHandle handle,
                int iter,
                [user_check] DMatrixHandle* dmats,
                [user_check]const char** evnames,
                bst_ulong len,
                [user_check] const char** out_str);

        public int enclave_XGBoosterPredict(
                [user_check, isptr] BoosterHandle handle,
                [user_check, isptr] DMatrixHandle dmat,
                int option_mask,
                unsigned ntree_limit,
                [user_check] bst_ulong *out_len,
                [user_check] const bst_float **out_result);
        
        public int enclave_XGDMatrixGetFloatInfo(
                [user_check, isptr] DMatrixHandle handle,
                [user_check] const char* field,
                [user_check] bst_ulong *out_len,
                [user_check] const bst_float **out_dptr);

        public int enclave_XGBoosterLoadModel(
                [user_check, isptr] BoosterHandle handle,
                [user_check] const char* fname);
        
        public int enclave_XGBoosterSaveModel(
                [user_check, isptr] BoosterHandle handle,
                [user_check] const char* fname);

        public int enclave_XGDMatrixFree(
                [user_check, isptr] DMatrixHandle handle);

        public int enclave_XGBoosterFree(
                [user_check, isptr] BoosterHandle handle);

        public int enclave_get_remote_report_with_pubkey(
                [out] uint8_t **pem_key, 
                [out] size_t *key_size,
                [out] uint8_t **remote_report,
                [out] size_t  *remote_report_size);

        public int enclave_verify_remote_report_and_set_pubkey(
                [in, count=key_size] uint8_t *pem_key, 
                size_t key_size,
                [in, count=remote_report_size] uint8_t *remote_report,
                size_t remote_report_size);

        public int enclave_add_client_key(
                [user_check] char* fname, 
                [user_check] uint8_t* data, 
                size_t len, 
                [user_check] uint8_t* signature);
    };

    include "dirent.h"
    include "sys/stat.h"
    untrusted {
        DIR* host_opendir(
                [user_check] char* path);

        void* host_opendir_and_readdir(
                [user_check] char* path);

        struct stat host_stat(
                [user_check] char* path);

        FILE* host_fopen(
                [user_check] char* fname,
                [user_check] char* flag);

        void host_fclose(
                [user_check] FILE* fp);

        FILE* host_fseek(
                [user_check] FILE* fp,
                long pos);

        void* host_fread_one(
                [user_check] FILE* fp,
                size_t size);

        void host_fwrite_one(
                [user_check] void* ptr,
                size_t count,
                [user_check] FILE* fp);
    };
};


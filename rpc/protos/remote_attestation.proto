// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// option java_multiple_files = true;
// option java_package = "io.grpc.examples.routeguide";
// option java_outer_classname = "RemoteAttestationProto";
// option objc_class_prefix = "RA";
import "ndarray.proto";

package remote_attestation;

// Interface exported by the server.
service RemoteAttestation {
  // A simple RPC.
  //
  // Get attestation report
  // 
  // Status is a just a dummy argument and won't be used by the server
  rpc GetAttestation(Status) returns (Report) {}

  // A simple RPC.
  //
  // Send symmetric key encrypted with enclave public key, signature,
  // and name of file encrypted with symmetric key to server
  rpc SendKey(DataMetadata) returns (Status) {}

  // A simple RPC.
  //
  // Signal to RPC server that the client is ready
  rpc SignalStart(Status) returns (Predictions) {}
}

// Current status of the node
message Status {
  int32 status = 1;
}

// A report returned by the enclave for attestation 
message Report {
  // Public key of enclave 
  numproto.protobuf.NDArray pem_key = 1;

  // Size of public key
  uint32 key_size = 2;

  // Remote report of enclave
  numproto.protobuf.NDArray remote_report = 3;

  // Size of remote report
  uint32 remote_report_size = 4;
}

// Message from client to enclaves with information on how to retrieve
// training/test data
message DataMetadata {
  // Filename of data
  // string data_fname = 1;

  // Symmetric key used to encrypt data file, encrypted with
  // enclave public key
  numproto.protobuf.NDArray enc_sym_key = 1;

  // Length of sym_key
  uint32 key_size = 2;

  // Signature over encrypted symmetric key, signed with client private key
  numproto.protobuf.NDArray signature = 3;

  // Length of signature
  uint32 sig_len = 4;
}

// Encrypted predictions served by enclave, to be decrypted at client
message Predictions {
  // Encrypted predictions
  bytes predictions = 1;

  // Length of predictions
  uint32 num_preds = 2;
    
  // Status
  uint32 status = 3;
}


